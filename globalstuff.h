//CONSTANTES, TYPEDEFS, ENUMS GLOBALES

// INCLUDES
#include <stdint.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdbool.h>
#include "disdrv.h"
#include "joydrv.h"
#include "termlib.h"

//DEFINES 
#define CANTFILS 16
#define CANTCOLS 16
#define VIVA 1
#define MUERTA 0
#define ENCENDIDA 1
#define APAGADA 0

// STRUCTURES AND ENUMS
typedef uint8_t action_t; //PLAY/PAUSE/UP/DOWN/LEFT/RIGHT/EXITGAME/EXITPROGRAM

typedef uint8_t mundo_t[16][16];

typedef uint8_t rpinr_t[5][3];

typedef struct {
    uint8_t estado; //1 si viva, 0 si muerta
    dcoord_t coords;
    uint8_t encendida; //1 si esta encendida, 0 si esta apagada
} rana_t;

typedef struct {
    uint8_t obtclsize;
    uint8_t spacebtwobtcl;
    uint8_t sentidofila;
    uint8_t velocidadfila;
} fila_t;

enum player_action {NONE=0, PLAY, EXIT, UP, DOWN, LEFT, RIGHT, TOPSCORES}; //play-pause y exitgame-exitprgram se infiere por contexto
enum cell_state {STREET=0, CAR, TRUCK, BUS, WATER, LOG, TORTOISE, SAFE, DEAD};

// GLOBAL VARIABLES
rana_t frog = {.estado=1,.coords.x=8,.coords.y=15,.encendida=0};
mundo_t world = {
    {DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD},
    {DEAD,SAFE,SAFE,SAFE,DEAD,DEAD,SAFE,SAFE,DEAD,DEAD,SAFE,DEAD,DEAD,SAFE,SAFE,DEAD},
    {WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER},
    {WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER},
    {WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER},
    {WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER},
    {WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER},
    {WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER,WATER},
    {SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE},
    {STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET},
    {STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET},
    {STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET},
    {STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET},
    {STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET},
    {STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET,STREET},
    {SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE,SAFE}
};